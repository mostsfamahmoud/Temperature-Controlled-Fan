
Temperature_Controlled_Fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000247e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  0000247e  000024f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001df4  00000000  00000000  00002618  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ff5  00000000  00000000  0000440c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00005401  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  000055c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  000057d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  00007de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  000092b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000a5c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000aaa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b4c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6d 07 	call	0xeda	; 0xeda <main>
      7a:	0c 94 3d 12 	jmp	0x247a	; 0x247a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e7       	ldi	r26, 0x7B	; 123
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e7       	ldi	r24, 0x7B	; 123
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6b e7       	ldi	r22, 0x7B	; 123
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	ed 57       	subi	r30, 0x7D	; 125
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <main>:
#include "lm35_sensor.h"
#include "dc_motor.h"


int main(void)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <main+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
	uint8 tempValue = 0;               /* Variable to Store the Temperature value (initialized with 0) */
     ee6:	1b 82       	std	Y+3, r1	; 0x03

	ADC_ConfigType *Config_Ptr;        /* Pointer to Struct of type ADC_ConfigType */

	Config_Ptr->prescaler = FCPU_8;       /* Make ADC operate with Frequency = FCPU/8 (Prescaler --> 8) */
     ee8:	e9 81       	ldd	r30, Y+1	; 0x01
     eea:	fa 81       	ldd	r31, Y+2	; 0x02
     eec:	83 e0       	ldi	r24, 0x03	; 3
     eee:	81 83       	std	Z+1, r24	; 0x01

	Config_Ptr->ref_volt = INTERNAL_VREF; /* Make ADC operate with the internal reference voltage (2.56 V) */
     ef0:	e9 81       	ldd	r30, Y+1	; 0x01
     ef2:	fa 81       	ldd	r31, Y+2	; 0x02
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	80 83       	st	Z, r24

	ADC_init(Config_Ptr);     /* Passing this Pointer as Parameter to ADC_init() to initailize ADC with these requirements */
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <ADC_init>

	LCD_init();               /* Initialize LCD */
     f00:	0e 94 0f 0c 	call	0x181e	; 0x181e <LCD_init>

	DcMotor_Init();           /* Initialize DC-Motor */
     f04:	0e 94 2f 08 	call	0x105e	; 0x105e <DcMotor_Init>

	LCD_displayStringRowColumn(0, 2, "FAN IS ");     /* Display String "FAN IS" at (ROW 0, COLUMN 2) on LCD */
     f08:	20 e6       	ldi	r18, 0x60	; 96
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	62 e0       	ldi	r22, 0x02	; 2
     f10:	a9 01       	movw	r20, r18
     f12:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 2, "TEMP = ");    /* Display String "TEMP = " at (ROW 1, COLUMN 2) on LCD */
     f16:	28 e6       	ldi	r18, 0x68	; 104
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	62 e0       	ldi	r22, 0x02	; 2
     f1e:	a9 01       	movw	r20, r18
     f20:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_displayStringRowColumn>


	while(1)
	{
		tempValue = LM35_GetTemperature();    /* Get the value of Temperature from LM35 Sensor */
     f24:	0e 94 37 11 	call	0x226e	; 0x226e <LM35_GetTemperature>
     f28:	8b 83       	std	Y+3, r24	; 0x03

		/*  If the temperature is less than 30 C, Turn off the fan */
		if (tempValue < 30)
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	8e 31       	cpi	r24, 0x1E	; 30
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <main+0x66>
			LCD_displayStringRowColumn(0, 9,"OFF");
     f30:	20 e7       	ldi	r18, 0x70	; 112
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	69 e0       	ldi	r22, 0x09	; 9
     f38:	a9 01       	movw	r20, r18
     f3a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_displayStringRowColumn>
     f3e:	0a c0       	rjmp	.+20     	; 0xf54 <main+0x7a>
		else
		{
			LCD_displayStringRowColumn(0, 9,"ON");
     f40:	24 e7       	ldi	r18, 0x74	; 116
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	69 e0       	ldi	r22, 0x09	; 9
     f48:	a9 01       	movw	r20, r18
     f4a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_displayStringRowColumn>
			/* To Clear the next digit if OFF state happened first */
			LCD_displayCharacter(' ');
     f4e:	80 e2       	ldi	r24, 0x20	; 32
     f50:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <LCD_displayCharacter>
		}


		LCD_moveCursor(1, 9);              /* Move Cursor to (ROW 1 , COLUMN 9) on LCD */
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	69 e0       	ldi	r22, 0x09	; 9
     f58:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_moveCursor>
		LCD_integerToString(tempValue);    /* Convert Temperature's Decimal value into String to Display it on LCD */
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 0a 11 	call	0x2214	; 0x2214 <LCD_integerToString>

		/* To handle the transitions of the digital value from 3 digits to 2 or 1 , Print space in the next digit place */
		LCD_displayString(" C ");
     f66:	87 e7       	ldi	r24, 0x77	; 119
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 93 10 	call	0x2126	; 0x2126 <LCD_displayString>


		if(tempValue >= 120)
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	88 37       	cpi	r24, 0x78	; 120
     f72:	28 f0       	brcs	.+10     	; 0xf7e <main+0xa4>
		{
			/* If the temperature is greater than or equal 120C , Turn on the fan with 100% of its maximum speed */
			DcMotor_Rotate(ClockWise, 100);
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	64 e6       	ldi	r22, 0x64	; 100
     f78:	0e 94 4a 08 	call	0x1094	; 0x1094 <DcMotor_Rotate>
     f7c:	d3 cf       	rjmp	.-90     	; 0xf24 <main+0x4a>
		}
		else if(tempValue >= 90)
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	8a 35       	cpi	r24, 0x5A	; 90
     f82:	28 f0       	brcs	.+10     	; 0xf8e <main+0xb4>
		{
			/* If the temperature is greater than or equal 90C , Turn on the fan with 75% of its maximum speed */
			DcMotor_Rotate(ClockWise, 75);
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	6b e4       	ldi	r22, 0x4B	; 75
     f88:	0e 94 4a 08 	call	0x1094	; 0x1094 <DcMotor_Rotate>
     f8c:	cb cf       	rjmp	.-106    	; 0xf24 <main+0x4a>
		}
		else if(tempValue >= 60)
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	8c 33       	cpi	r24, 0x3C	; 60
     f92:	28 f0       	brcs	.+10     	; 0xf9e <main+0xc4>
		{
			/* If the temperature is greater than or equal 60C , Turn on the fan with 50% of its maximum speed */
			DcMotor_Rotate(ClockWise, 50);
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	62 e3       	ldi	r22, 0x32	; 50
     f98:	0e 94 4a 08 	call	0x1094	; 0x1094 <DcMotor_Rotate>
     f9c:	c3 cf       	rjmp	.-122    	; 0xf24 <main+0x4a>
		}
		else if (tempValue >= 30)
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	8e 31       	cpi	r24, 0x1E	; 30
     fa2:	28 f0       	brcs	.+10     	; 0xfae <main+0xd4>
		{
			/* If the temperature is greater than or equal 30C , Turn on the fan with 25% of its maximum speed */
			DcMotor_Rotate(ClockWise, 25);
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	69 e1       	ldi	r22, 0x19	; 25
     fa8:	0e 94 4a 08 	call	0x1094	; 0x1094 <DcMotor_Rotate>
     fac:	bb cf       	rjmp	.-138    	; 0xf24 <main+0x4a>
		{
			/* If the temperature is less than 30 C, Turn off the fan
			 * With DC_MotorState = STOP , To Stop the Motion of DC-Motor (Fan OFF)
			 * Speed MUST be ZERO , To Make OCR0 = ZERO --> NO PWM Signal (NO Speed)
 			 */
			DcMotor_Rotate(STOP, 0);
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	0e 94 4a 08 	call	0x1094	; 0x1094 <DcMotor_Rotate>
     fb6:	b6 cf       	rjmp	.-148    	; 0xf24 <main+0x4a>

00000fb8 <ADC_init>:
 *     Pointer to Constant Struct of type (ADC_ConfigType) to dynamically configure Ref_Volt & Prescaler of ADC
 * Return:
 *     None
 */
void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <ADC_init+0x6>
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
	 * REFS1:0 -> Dynamically chosen by user according to Config_Ptr->ref_volt
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */

	ADMUX = (Config_Ptr->ref_volt << 6);
     fc6:	a7 e2       	ldi	r26, 0x27	; 39
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e9 81       	ldd	r30, Y+1	; 0x01
     fcc:	fa 81       	ldd	r31, Y+2	; 0x02
     fce:	80 81       	ld	r24, Z
     fd0:	82 95       	swap	r24
     fd2:	88 0f       	add	r24, r24
     fd4:	88 0f       	add	r24, r24
     fd6:	80 7c       	andi	r24, 0xC0	; 192
     fd8:	8c 93       	st	X, r24
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 -> Dynamically chosen by user to select ADC_Clock according to Config_Ptr->prescaler
	 *            ADC must operate in range 50-200Khz
	 */

	ADCSRA = (1 << ADEN) | (Config_Ptr->prescaler & 0x07);
     fda:	a6 e2       	ldi	r26, 0x26	; 38
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e9 81       	ldd	r30, Y+1	; 0x01
     fe0:	fa 81       	ldd	r31, Y+2	; 0x02
     fe2:	81 81       	ldd	r24, Z+1	; 0x01
     fe4:	87 70       	andi	r24, 0x07	; 7
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	8c 93       	st	X, r24
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <ADC_readChannel>:
 *      Variable (channel_num) of type enum (ADC_Channel_ID)
 * Return:
 *      The digital value represented by (10 Bits) that is made by converting the Analog using ADC
 */
uint16 ADC_readChannel(ADC_Channel_ID channel_num)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	89 83       	std	Y+1, r24	; 0x01
	/* 1) Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel)
	 * 2) Input channel number must be from 0 --> 7
	 * 3) Choose the correct channel by setting the channel number in MUX4:0 bits
	 */
	ADMUX = (ADMUX &= 0xE0) | (channel_num & 0x07);
    1000:	27 e2       	ldi	r18, 0x27	; 39
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	a7 e2       	ldi	r26, 0x27	; 39
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e7 e2       	ldi	r30, 0x27	; 39
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 7e       	andi	r24, 0xE0	; 224
    1010:	8c 93       	st	X, r24
    1012:	8c 91       	ld	r24, X
    1014:	98 2f       	mov	r25, r24
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	87 70       	andi	r24, 0x07	; 7
    101a:	89 2b       	or	r24, r25
    101c:	f9 01       	movw	r30, r18
    101e:	80 83       	st	Z, r24

	SET_BIT(ADCSRA,ADSC);              /* Start conversion write '1' to ADSC */
    1020:	a6 e2       	ldi	r26, 0x26	; 38
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e6 e2       	ldi	r30, 0x26	; 38
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	80 64       	ori	r24, 0x40	; 64
    102c:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF));  /* Wait for conversion to complete, ADIF becomes '1' */
    102e:	e6 e2       	ldi	r30, 0x26	; 38
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	80 71       	andi	r24, 0x10	; 16
    103a:	90 70       	andi	r25, 0x00	; 0
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	b9 f3       	breq	.-18     	; 0x102e <ADC_readChannel+0x3a>
	SET_BIT(ADCSRA,ADIF);              /* Clear ADIF by writing '1' to it */
    1040:	a6 e2       	ldi	r26, 0x26	; 38
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e6 e2       	ldi	r30, 0x26	; 38
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	80 61       	ori	r24, 0x10	; 16
    104c:	8c 93       	st	X, r24
	return ADC;                        /* Read the digital value from the data register */
    104e:	e4 e2       	ldi	r30, 0x24	; 36
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
}
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <DcMotor_Init>:
Description
	1) The Function responsible for setup the direction for the two motor pins through the GPIO driver.
	2) Stop at the DC-Motor at the beginning through the GPIO driver.
*/
void DcMotor_Init(void)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
	/* Configure Pins PB0 and PB1 as Output pins */
	GPIO_setupPinDirection(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	41 e0       	ldi	r20, 0x01	; 1
    106c:	0e 94 99 08 	call	0x1132	; 0x1132 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	41 e0       	ldi	r20, 0x01	; 1
    1076:	0e 94 99 08 	call	0x1132	; 0x1132 <GPIO_setupPinDirection>

	/* Stop the DC-Motor at the beginning (IN1 = 0, IN2 = 0) */
	GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
	GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	40 e0       	ldi	r20, 0x00	; 0
    108a:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
}
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <DcMotor_Rotate>:
	          For example, if the input is 50, The motor should rotate with 50% of its maximum speed.

Return: None
*/
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <DcMotor_Rotate+0x6>
    109a:	00 d0       	rcall	.+0      	; 0x109c <DcMotor_Rotate+0x8>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	6a 83       	std	Y+2, r22	; 0x02
	/* Setting the DC Motor rotation direction (CW/ or A-CW or stop) based on the state value. */
	switch(state)
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3c 83       	std	Y+4, r19	; 0x04
    10ac:	2b 83       	std	Y+3, r18	; 0x03
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	91 05       	cpc	r25, r1
    10b6:	f9 f0       	breq	.+62     	; 0x10f6 <DcMotor_Rotate+0x62>
    10b8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ba:	3c 81       	ldd	r19, Y+4	; 0x04
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	79 f0       	breq	.+30     	; 0x10e0 <DcMotor_Rotate+0x4c>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	01 f5       	brne	.+64     	; 0x110a <DcMotor_Rotate+0x76>
	{
	case STOP:
		/* Stop the DC-Motor (IN1 = 0, IN2 = 0) */
		GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
		GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    10de:	15 c0       	rjmp	.+42     	; 0x110a <DcMotor_Rotate+0x76>
		break;
	case ClockWise:
		/* DC-Motor Mode --> ClockWise Rotation (IN1 = 0, IN2 = 1) */
		GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
		GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	41 e0       	ldi	r20, 0x01	; 1
    10f0:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    10f4:	0a c0       	rjmp	.+20     	; 0x110a <DcMotor_Rotate+0x76>
		break;
	case Anti_ClockWise:
		/* DC-Motor Mode --> Anti_ClockWise Rotation (IN1 = 1, IN2 = 0) */
		GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
		GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
	default:
		break;
	}

	/* Setting the Required DC Motor Speed Using PWM Signal at Enable1 */
	if ((speed > 0) && (speed <= 100))
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	88 23       	and	r24, r24
    110e:	39 f0       	breq	.+14     	; 0x111e <DcMotor_Rotate+0x8a>
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	85 36       	cpi	r24, 0x65	; 101
    1114:	20 f4       	brcc	.+8      	; 0x111e <DcMotor_Rotate+0x8a>
	{
		PWM_Timer0_Start(speed);
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <PWM_Timer0_Start>
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <DcMotor_Rotate+0x90>
	}
	else
	{
		PWM_Timer0_Start(0);
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <PWM_Timer0_Start>
	}
}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 portNum, uint8 pinNum, GPIO_PinDirectionType direction)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	27 97       	sbiw	r28, 0x07	; 7
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	6a 83       	std	Y+2, r22	; 0x02
    114a:	4b 83       	std	Y+3, r20	; 0x03

	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	88 30       	cpi	r24, 0x08	; 8
    1150:	08 f0       	brcs	.+2      	; 0x1154 <GPIO_setupPinDirection+0x22>
    1152:	ee c0       	rjmp	.+476    	; 0x1330 <GPIO_setupPinDirection+0x1fe>
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	84 30       	cpi	r24, 0x04	; 4
    1158:	08 f0       	brcs	.+2      	; 0x115c <GPIO_setupPinDirection+0x2a>
    115a:	ea c0       	rjmp	.+468    	; 0x1330 <GPIO_setupPinDirection+0x1fe>
	{
		/* Do Nothing */
		return;
	}

	if (direction == PIN_OUTPUT)
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	09 f0       	breq	.+2      	; 0x1164 <GPIO_setupPinDirection+0x32>
    1162:	6f c0       	rjmp	.+222    	; 0x1242 <GPIO_setupPinDirection+0x110>
	{
		switch (portNum)
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3f 83       	std	Y+7, r19	; 0x07
    116c:	2e 83       	std	Y+6, r18	; 0x06
    116e:	8e 81       	ldd	r24, Y+6	; 0x06
    1170:	9f 81       	ldd	r25, Y+7	; 0x07
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	91 05       	cpc	r25, r1
    1176:	49 f1       	breq	.+82     	; 0x11ca <GPIO_setupPinDirection+0x98>
    1178:	2e 81       	ldd	r18, Y+6	; 0x06
    117a:	3f 81       	ldd	r19, Y+7	; 0x07
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	2c f4       	brge	.+10     	; 0x118c <GPIO_setupPinDirection+0x5a>
    1182:	8e 81       	ldd	r24, Y+6	; 0x06
    1184:	9f 81       	ldd	r25, Y+7	; 0x07
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	61 f0       	breq	.+24     	; 0x11a2 <GPIO_setupPinDirection+0x70>
    118a:	d2 c0       	rjmp	.+420    	; 0x1330 <GPIO_setupPinDirection+0x1fe>
    118c:	2e 81       	ldd	r18, Y+6	; 0x06
    118e:	3f 81       	ldd	r19, Y+7	; 0x07
    1190:	22 30       	cpi	r18, 0x02	; 2
    1192:	31 05       	cpc	r19, r1
    1194:	71 f1       	breq	.+92     	; 0x11f2 <GPIO_setupPinDirection+0xc0>
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	9f 81       	ldd	r25, Y+7	; 0x07
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	91 05       	cpc	r25, r1
    119e:	e9 f1       	breq	.+122    	; 0x121a <GPIO_setupPinDirection+0xe8>
    11a0:	c7 c0       	rjmp	.+398    	; 0x1330 <GPIO_setupPinDirection+0x1fe>
		{
		case PORTA_ID:
			SET_BIT(DDRA, pinNum);
    11a2:	aa e3       	ldi	r26, 0x3A	; 58
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ea e3       	ldi	r30, 0x3A	; 58
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_setupPinDirection+0x8e>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_setupPinDirection+0x8a>
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	b3 c0       	rjmp	.+358    	; 0x1330 <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTB_ID:
			SET_BIT(DDRB, pinNum);
    11ca:	a7 e3       	ldi	r26, 0x37	; 55
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e7 e3       	ldi	r30, 0x37	; 55
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <GPIO_setupPinDirection+0xb6>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <GPIO_setupPinDirection+0xb2>
    11ec:	84 2b       	or	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	9f c0       	rjmp	.+318    	; 0x1330 <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTC_ID:
			SET_BIT(DDRC, pinNum);
    11f2:	a4 e3       	ldi	r26, 0x34	; 52
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e4 e3       	ldi	r30, 0x34	; 52
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <GPIO_setupPinDirection+0xde>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <GPIO_setupPinDirection+0xda>
    1214:	84 2b       	or	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	8b c0       	rjmp	.+278    	; 0x1330 <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTD_ID:
			SET_BIT(DDRD, pinNum);
    121a:	a1 e3       	ldi	r26, 0x31	; 49
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e1 e3       	ldi	r30, 0x31	; 49
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <GPIO_setupPinDirection+0x106>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <GPIO_setupPinDirection+0x102>
    123c:	84 2b       	or	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	77 c0       	rjmp	.+238    	; 0x1330 <GPIO_setupPinDirection+0x1fe>
			break;
		}
	}
	else if (direction == PIN_INPUT)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	88 23       	and	r24, r24
    1246:	09 f0       	breq	.+2      	; 0x124a <GPIO_setupPinDirection+0x118>
    1248:	73 c0       	rjmp	.+230    	; 0x1330 <GPIO_setupPinDirection+0x1fe>
	{
		switch (portNum)
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	3d 83       	std	Y+5, r19	; 0x05
    1252:	2c 83       	std	Y+4, r18	; 0x04
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	9d 81       	ldd	r25, Y+5	; 0x05
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	91 05       	cpc	r25, r1
    125c:	59 f1       	breq	.+86     	; 0x12b4 <GPIO_setupPinDirection+0x182>
    125e:	2c 81       	ldd	r18, Y+4	; 0x04
    1260:	3d 81       	ldd	r19, Y+5	; 0x05
    1262:	22 30       	cpi	r18, 0x02	; 2
    1264:	31 05       	cpc	r19, r1
    1266:	2c f4       	brge	.+10     	; 0x1272 <GPIO_setupPinDirection+0x140>
    1268:	8c 81       	ldd	r24, Y+4	; 0x04
    126a:	9d 81       	ldd	r25, Y+5	; 0x05
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	69 f0       	breq	.+26     	; 0x128a <GPIO_setupPinDirection+0x158>
    1270:	5f c0       	rjmp	.+190    	; 0x1330 <GPIO_setupPinDirection+0x1fe>
    1272:	2c 81       	ldd	r18, Y+4	; 0x04
    1274:	3d 81       	ldd	r19, Y+5	; 0x05
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	31 05       	cpc	r19, r1
    127a:	89 f1       	breq	.+98     	; 0x12de <GPIO_setupPinDirection+0x1ac>
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	9d 81       	ldd	r25, Y+5	; 0x05
    1280:	83 30       	cpi	r24, 0x03	; 3
    1282:	91 05       	cpc	r25, r1
    1284:	09 f4       	brne	.+2      	; 0x1288 <GPIO_setupPinDirection+0x156>
    1286:	40 c0       	rjmp	.+128    	; 0x1308 <GPIO_setupPinDirection+0x1d6>
    1288:	53 c0       	rjmp	.+166    	; 0x1330 <GPIO_setupPinDirection+0x1fe>
		{
		case PORTA_ID:
			CLEAR_BIT(DDRA, pinNum);
    128a:	aa e3       	ldi	r26, 0x3A	; 58
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ea e3       	ldi	r30, 0x3A	; 58
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_setupPinDirection+0x176>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_setupPinDirection+0x172>
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	3e c0       	rjmp	.+124    	; 0x1330 <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTB_ID:
			CLEAR_BIT(DDRB, pinNum);
    12b4:	a7 e3       	ldi	r26, 0x37	; 55
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e7 e3       	ldi	r30, 0x37	; 55
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <GPIO_setupPinDirection+0x1a0>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <GPIO_setupPinDirection+0x19c>
    12d6:	80 95       	com	r24
    12d8:	84 23       	and	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	29 c0       	rjmp	.+82     	; 0x1330 <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTC_ID:
			CLEAR_BIT(DDRC, pinNum);
    12de:	a4 e3       	ldi	r26, 0x34	; 52
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e4 e3       	ldi	r30, 0x34	; 52
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <GPIO_setupPinDirection+0x1ca>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <GPIO_setupPinDirection+0x1c6>
    1300:	80 95       	com	r24
    1302:	84 23       	and	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	14 c0       	rjmp	.+40     	; 0x1330 <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTD_ID:
			CLEAR_BIT(DDRD, pinNum);
    1308:	a1 e3       	ldi	r26, 0x31	; 49
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e1 e3       	ldi	r30, 0x31	; 49
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <GPIO_setupPinDirection+0x1f4>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <GPIO_setupPinDirection+0x1f0>
    132a:	80 95       	com	r24
    132c:	84 23       	and	r24, r20
    132e:	8c 93       	st	X, r24
			break;
		}
	}
	else
		return;
}
    1330:	27 96       	adiw	r28, 0x07	; 7
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	2d 97       	sbiw	r28, 0x0d	; 13
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	6a 83       	std	Y+2, r22	; 0x02
    135a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	88 30       	cpi	r24, 0x08	; 8
    1360:	08 f0       	brcs	.+2      	; 0x1364 <GPIO_writePin+0x22>
    1362:	05 c1       	rjmp	.+522    	; 0x156e <GPIO_writePin+0x22c>
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	84 30       	cpi	r24, 0x04	; 4
    1368:	08 f0       	brcs	.+2      	; 0x136c <GPIO_writePin+0x2a>
    136a:	01 c1       	rjmp	.+514    	; 0x156e <GPIO_writePin+0x22c>
	{
		/* Do Nothing */
	}
	else
	{
		switch (port_num)
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	3d 87       	std	Y+13, r19	; 0x0d
    1374:	2c 87       	std	Y+12, r18	; 0x0c
    1376:	8c 85       	ldd	r24, Y+12	; 0x0c
    1378:	9d 85       	ldd	r25, Y+13	; 0x0d
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	91 05       	cpc	r25, r1
    137e:	09 f4       	brne	.+2      	; 0x1382 <GPIO_writePin+0x40>
    1380:	4f c0       	rjmp	.+158    	; 0x1420 <GPIO_writePin+0xde>
    1382:	2c 85       	ldd	r18, Y+12	; 0x0c
    1384:	3d 85       	ldd	r19, Y+13	; 0x0d
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	2c f4       	brge	.+10     	; 0x1396 <GPIO_writePin+0x54>
    138c:	8c 85       	ldd	r24, Y+12	; 0x0c
    138e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	71 f0       	breq	.+28     	; 0x13b0 <GPIO_writePin+0x6e>
    1394:	ec c0       	rjmp	.+472    	; 0x156e <GPIO_writePin+0x22c>
    1396:	2c 85       	ldd	r18, Y+12	; 0x0c
    1398:	3d 85       	ldd	r19, Y+13	; 0x0d
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <GPIO_writePin+0x60>
    13a0:	77 c0       	rjmp	.+238    	; 0x1490 <GPIO_writePin+0x14e>
    13a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    13a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	91 05       	cpc	r25, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <GPIO_writePin+0x6c>
    13ac:	a9 c0       	rjmp	.+338    	; 0x1500 <GPIO_writePin+0x1be>
    13ae:	df c0       	rjmp	.+446    	; 0x156e <GPIO_writePin+0x22c>
		{
		case PORTA_ID:
			WRITE_BIT(PORTA, pin_num, value);
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3b 87       	std	Y+11, r19	; 0x0b
    13b8:	2a 87       	std	Y+10, r18	; 0x0a
    13ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    13bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	31 f0       	breq	.+12     	; 0x13ce <GPIO_writePin+0x8c>
    13c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    13c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    13c6:	21 30       	cpi	r18, 0x01	; 1
    13c8:	31 05       	cpc	r19, r1
    13ca:	b1 f0       	breq	.+44     	; 0x13f8 <GPIO_writePin+0xb6>
    13cc:	d0 c0       	rjmp	.+416    	; 0x156e <GPIO_writePin+0x22c>
    13ce:	ab e3       	ldi	r26, 0x3B	; 59
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	eb e3       	ldi	r30, 0x3B	; 59
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <GPIO_writePin+0xaa>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <GPIO_writePin+0xa6>
    13f0:	80 95       	com	r24
    13f2:	84 23       	and	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	bb c0       	rjmp	.+374    	; 0x156e <GPIO_writePin+0x22c>
    13f8:	ab e3       	ldi	r26, 0x3B	; 59
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	eb e3       	ldi	r30, 0x3B	; 59
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <GPIO_writePin+0xd4>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <GPIO_writePin+0xd0>
    141a:	84 2b       	or	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	a7 c0       	rjmp	.+334    	; 0x156e <GPIO_writePin+0x22c>
			break;
		case PORTB_ID:
			WRITE_BIT(PORTB, pin_num, value);
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	39 87       	std	Y+9, r19	; 0x09
    1428:	28 87       	std	Y+8, r18	; 0x08
    142a:	88 85       	ldd	r24, Y+8	; 0x08
    142c:	99 85       	ldd	r25, Y+9	; 0x09
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	31 f0       	breq	.+12     	; 0x143e <GPIO_writePin+0xfc>
    1432:	28 85       	ldd	r18, Y+8	; 0x08
    1434:	39 85       	ldd	r19, Y+9	; 0x09
    1436:	21 30       	cpi	r18, 0x01	; 1
    1438:	31 05       	cpc	r19, r1
    143a:	b1 f0       	breq	.+44     	; 0x1468 <GPIO_writePin+0x126>
    143c:	98 c0       	rjmp	.+304    	; 0x156e <GPIO_writePin+0x22c>
    143e:	a8 e3       	ldi	r26, 0x38	; 56
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e8 e3       	ldi	r30, 0x38	; 56
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <GPIO_writePin+0x11a>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <GPIO_writePin+0x116>
    1460:	80 95       	com	r24
    1462:	84 23       	and	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	83 c0       	rjmp	.+262    	; 0x156e <GPIO_writePin+0x22c>
    1468:	a8 e3       	ldi	r26, 0x38	; 56
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e8 e3       	ldi	r30, 0x38	; 56
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <GPIO_writePin+0x144>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <GPIO_writePin+0x140>
    148a:	84 2b       	or	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	6f c0       	rjmp	.+222    	; 0x156e <GPIO_writePin+0x22c>
			break;
		case PORTC_ID:
			WRITE_BIT(PORTC, pin_num, value);
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3f 83       	std	Y+7, r19	; 0x07
    1498:	2e 83       	std	Y+6, r18	; 0x06
    149a:	8e 81       	ldd	r24, Y+6	; 0x06
    149c:	9f 81       	ldd	r25, Y+7	; 0x07
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	31 f0       	breq	.+12     	; 0x14ae <GPIO_writePin+0x16c>
    14a2:	2e 81       	ldd	r18, Y+6	; 0x06
    14a4:	3f 81       	ldd	r19, Y+7	; 0x07
    14a6:	21 30       	cpi	r18, 0x01	; 1
    14a8:	31 05       	cpc	r19, r1
    14aa:	b1 f0       	breq	.+44     	; 0x14d8 <GPIO_writePin+0x196>
    14ac:	60 c0       	rjmp	.+192    	; 0x156e <GPIO_writePin+0x22c>
    14ae:	a5 e3       	ldi	r26, 0x35	; 53
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e5 e3       	ldi	r30, 0x35	; 53
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <GPIO_writePin+0x18a>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <GPIO_writePin+0x186>
    14d0:	80 95       	com	r24
    14d2:	84 23       	and	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	4b c0       	rjmp	.+150    	; 0x156e <GPIO_writePin+0x22c>
    14d8:	a5 e3       	ldi	r26, 0x35	; 53
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e5 e3       	ldi	r30, 0x35	; 53
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <GPIO_writePin+0x1b4>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <GPIO_writePin+0x1b0>
    14fa:	84 2b       	or	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	37 c0       	rjmp	.+110    	; 0x156e <GPIO_writePin+0x22c>
			break;
		case PORTD_ID:
			WRITE_BIT(PORTD, pin_num, value);
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	3d 83       	std	Y+5, r19	; 0x05
    1508:	2c 83       	std	Y+4, r18	; 0x04
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	31 f0       	breq	.+12     	; 0x151e <GPIO_writePin+0x1dc>
    1512:	2c 81       	ldd	r18, Y+4	; 0x04
    1514:	3d 81       	ldd	r19, Y+5	; 0x05
    1516:	21 30       	cpi	r18, 0x01	; 1
    1518:	31 05       	cpc	r19, r1
    151a:	b1 f0       	breq	.+44     	; 0x1548 <GPIO_writePin+0x206>
    151c:	28 c0       	rjmp	.+80     	; 0x156e <GPIO_writePin+0x22c>
    151e:	a2 e3       	ldi	r26, 0x32	; 50
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e2 e3       	ldi	r30, 0x32	; 50
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <GPIO_writePin+0x1fa>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <GPIO_writePin+0x1f6>
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	13 c0       	rjmp	.+38     	; 0x156e <GPIO_writePin+0x22c>
    1548:	a2 e3       	ldi	r26, 0x32	; 50
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e2 e3       	ldi	r30, 0x32	; 50
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <GPIO_writePin+0x224>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <GPIO_writePin+0x220>
    156a:	84 2b       	or	r24, r20
    156c:	8c 93       	st	X, r24
			break;
		}
	}
}
    156e:	2d 96       	adiw	r28, 0x0d	; 13
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	00 d0       	rcall	.+0      	; 0x1586 <GPIO_readPin+0x6>
    1586:	00 d0       	rcall	.+0      	; 0x1588 <GPIO_readPin+0x8>
    1588:	0f 92       	push	r0
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	88 30       	cpi	r24, 0x08	; 8
    1596:	18 f4       	brcc	.+6      	; 0x159e <GPIO_readPin+0x1e>
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	84 30       	cpi	r24, 0x04	; 4
    159c:	10 f0       	brcs	.+4      	; 0x15a2 <GPIO_readPin+0x22>
	{
		pinValue = LOGIC_LOW;
    159e:	19 82       	std	Y+1, r1	; 0x01
    15a0:	67 c0       	rjmp	.+206    	; 0x1670 <GPIO_readPin+0xf0>
	}
	else
	{
		switch (port_num)
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3d 83       	std	Y+5, r19	; 0x05
    15aa:	2c 83       	std	Y+4, r18	; 0x04
    15ac:	4c 81       	ldd	r20, Y+4	; 0x04
    15ae:	5d 81       	ldd	r21, Y+5	; 0x05
    15b0:	41 30       	cpi	r20, 0x01	; 1
    15b2:	51 05       	cpc	r21, r1
    15b4:	41 f1       	breq	.+80     	; 0x1606 <GPIO_readPin+0x86>
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	91 05       	cpc	r25, r1
    15be:	34 f4       	brge	.+12     	; 0x15cc <GPIO_readPin+0x4c>
    15c0:	2c 81       	ldd	r18, Y+4	; 0x04
    15c2:	3d 81       	ldd	r19, Y+5	; 0x05
    15c4:	21 15       	cp	r18, r1
    15c6:	31 05       	cpc	r19, r1
    15c8:	61 f0       	breq	.+24     	; 0x15e2 <GPIO_readPin+0x62>
    15ca:	52 c0       	rjmp	.+164    	; 0x1670 <GPIO_readPin+0xf0>
    15cc:	4c 81       	ldd	r20, Y+4	; 0x04
    15ce:	5d 81       	ldd	r21, Y+5	; 0x05
    15d0:	42 30       	cpi	r20, 0x02	; 2
    15d2:	51 05       	cpc	r21, r1
    15d4:	51 f1       	breq	.+84     	; 0x162a <GPIO_readPin+0xaa>
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	91 05       	cpc	r25, r1
    15de:	b9 f1       	breq	.+110    	; 0x164e <GPIO_readPin+0xce>
    15e0:	47 c0       	rjmp	.+142    	; 0x1670 <GPIO_readPin+0xf0>
		{
		case PORTA_ID:
			pinValue = GET_BIT(PINA, pin_num);
    15e2:	e9 e3       	ldi	r30, 0x39	; 57
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a9 01       	movw	r20, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <GPIO_readPin+0x7a>
    15f6:	55 95       	asr	r21
    15f8:	47 95       	ror	r20
    15fa:	8a 95       	dec	r24
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <GPIO_readPin+0x76>
    15fe:	ca 01       	movw	r24, r20
    1600:	81 70       	andi	r24, 0x01	; 1
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	35 c0       	rjmp	.+106    	; 0x1670 <GPIO_readPin+0xf0>
			break;
		case PORTB_ID:
			pinValue = GET_BIT(PINB, pin_num);
    1606:	e6 e3       	ldi	r30, 0x36	; 54
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a9 01       	movw	r20, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <GPIO_readPin+0x9e>
    161a:	55 95       	asr	r21
    161c:	47 95       	ror	r20
    161e:	8a 95       	dec	r24
    1620:	e2 f7       	brpl	.-8      	; 0x161a <GPIO_readPin+0x9a>
    1622:	ca 01       	movw	r24, r20
    1624:	81 70       	andi	r24, 0x01	; 1
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	23 c0       	rjmp	.+70     	; 0x1670 <GPIO_readPin+0xf0>
			break;
		case PORTC_ID:
			pinValue = GET_BIT(PINC, pin_num);
    162a:	e3 e3       	ldi	r30, 0x33	; 51
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a9 01       	movw	r20, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <GPIO_readPin+0xc2>
    163e:	55 95       	asr	r21
    1640:	47 95       	ror	r20
    1642:	8a 95       	dec	r24
    1644:	e2 f7       	brpl	.-8      	; 0x163e <GPIO_readPin+0xbe>
    1646:	ca 01       	movw	r24, r20
    1648:	81 70       	andi	r24, 0x01	; 1
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	11 c0       	rjmp	.+34     	; 0x1670 <GPIO_readPin+0xf0>
			break;
		case PORTD_ID:
			pinValue = GET_BIT(PIND, pin_num);
    164e:	e0 e3       	ldi	r30, 0x30	; 48
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a9 01       	movw	r20, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <GPIO_readPin+0xe6>
    1662:	55 95       	asr	r21
    1664:	47 95       	ror	r20
    1666:	8a 95       	dec	r24
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <GPIO_readPin+0xe2>
    166a:	ca 01       	movw	r24, r20
    166c:	81 70       	andi	r24, 0x01	; 1
    166e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return pinValue;
    1670:	89 81       	ldd	r24, Y+1	; 0x01
}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	00 d0       	rcall	.+0      	; 0x1688 <GPIO_setupPortDirection+0x6>
    1688:	00 d0       	rcall	.+0      	; 0x168a <GPIO_setupPortDirection+0x8>
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	84 30       	cpi	r24, 0x04	; 4
    1696:	90 f5       	brcc	.+100    	; 0x16fc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3c 83       	std	Y+4, r19	; 0x04
    16a0:	2b 83       	std	Y+3, r18	; 0x03
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	d1 f0       	breq	.+52     	; 0x16e0 <GPIO_setupPortDirection+0x5e>
    16ac:	2b 81       	ldd	r18, Y+3	; 0x03
    16ae:	3c 81       	ldd	r19, Y+4	; 0x04
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <GPIO_setupPortDirection+0x3e>
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	61 f0       	breq	.+24     	; 0x16d6 <GPIO_setupPortDirection+0x54>
    16be:	1e c0       	rjmp	.+60     	; 0x16fc <GPIO_setupPortDirection+0x7a>
    16c0:	2b 81       	ldd	r18, Y+3	; 0x03
    16c2:	3c 81       	ldd	r19, Y+4	; 0x04
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	81 f0       	breq	.+32     	; 0x16ea <GPIO_setupPortDirection+0x68>
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	91 05       	cpc	r25, r1
    16d2:	81 f0       	breq	.+32     	; 0x16f4 <GPIO_setupPortDirection+0x72>
    16d4:	13 c0       	rjmp	.+38     	; 0x16fc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16d6:	ea e3       	ldi	r30, 0x3A	; 58
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	80 83       	st	Z, r24
    16de:	0e c0       	rjmp	.+28     	; 0x16fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16e0:	e7 e3       	ldi	r30, 0x37	; 55
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	80 83       	st	Z, r24
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16ea:	e4 e3       	ldi	r30, 0x34	; 52
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	80 83       	st	Z, r24
    16f2:	04 c0       	rjmp	.+8      	; 0x16fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16f4:	e1 e3       	ldi	r30, 0x31	; 49
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	80 83       	st	Z, r24
			break;
		}
	}
}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <GPIO_writePort+0x6>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <GPIO_writePort+0x8>
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	84 30       	cpi	r24, 0x04	; 4
    171e:	90 f5       	brcc	.+100    	; 0x1784 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write value on a specific port as required */
		switch (port_num)
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	3c 83       	std	Y+4, r19	; 0x04
    1728:	2b 83       	std	Y+3, r18	; 0x03
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	91 05       	cpc	r25, r1
    1732:	d1 f0       	breq	.+52     	; 0x1768 <GPIO_writePort+0x5e>
    1734:	2b 81       	ldd	r18, Y+3	; 0x03
    1736:	3c 81       	ldd	r19, Y+4	; 0x04
    1738:	22 30       	cpi	r18, 0x02	; 2
    173a:	31 05       	cpc	r19, r1
    173c:	2c f4       	brge	.+10     	; 0x1748 <GPIO_writePort+0x3e>
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	61 f0       	breq	.+24     	; 0x175e <GPIO_writePort+0x54>
    1746:	1e c0       	rjmp	.+60     	; 0x1784 <GPIO_writePort+0x7a>
    1748:	2b 81       	ldd	r18, Y+3	; 0x03
    174a:	3c 81       	ldd	r19, Y+4	; 0x04
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	81 f0       	breq	.+32     	; 0x1772 <GPIO_writePort+0x68>
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	83 30       	cpi	r24, 0x03	; 3
    1758:	91 05       	cpc	r25, r1
    175a:	81 f0       	breq	.+32     	; 0x177c <GPIO_writePort+0x72>
    175c:	13 c0       	rjmp	.+38     	; 0x1784 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    175e:	eb e3       	ldi	r30, 0x3B	; 59
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	80 83       	st	Z, r24
    1766:	0e c0       	rjmp	.+28     	; 0x1784 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1768:	e8 e3       	ldi	r30, 0x38	; 56
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	80 83       	st	Z, r24
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1772:	e5 e3       	ldi	r30, 0x35	; 53
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	80 83       	st	Z, r24
    177a:	04 c0       	rjmp	.+8      	; 0x1784 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    177c:	e2 e3       	ldi	r30, 0x32	; 50
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	80 83       	st	Z, r24
			break;
		}
	}
}
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	00 d0       	rcall	.+0      	; 0x1798 <GPIO_readPort+0x6>
    1798:	00 d0       	rcall	.+0      	; 0x179a <GPIO_readPort+0x8>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 portValue;
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	84 30       	cpi	r24, 0x04	; 4
    17a4:	10 f0       	brcs	.+4      	; 0x17aa <GPIO_readPort+0x18>
	{
		portValue = LOGIC_LOW;
    17a6:	19 82       	std	Y+1, r1	; 0x01
    17a8:	32 c0       	rjmp	.+100    	; 0x180e <GPIO_readPort+0x7c>
	}
	else
	{
		/* Read and return value on a specific port as required */
		switch (port_num)
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	3c 83       	std	Y+4, r19	; 0x04
    17b2:	2b 83       	std	Y+3, r18	; 0x03
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	91 05       	cpc	r25, r1
    17bc:	d1 f0       	breq	.+52     	; 0x17f2 <GPIO_readPort+0x60>
    17be:	2b 81       	ldd	r18, Y+3	; 0x03
    17c0:	3c 81       	ldd	r19, Y+4	; 0x04
    17c2:	22 30       	cpi	r18, 0x02	; 2
    17c4:	31 05       	cpc	r19, r1
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <GPIO_readPort+0x40>
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	61 f0       	breq	.+24     	; 0x17e8 <GPIO_readPort+0x56>
    17d0:	1e c0       	rjmp	.+60     	; 0x180e <GPIO_readPort+0x7c>
    17d2:	2b 81       	ldd	r18, Y+3	; 0x03
    17d4:	3c 81       	ldd	r19, Y+4	; 0x04
    17d6:	22 30       	cpi	r18, 0x02	; 2
    17d8:	31 05       	cpc	r19, r1
    17da:	81 f0       	breq	.+32     	; 0x17fc <GPIO_readPort+0x6a>
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	83 30       	cpi	r24, 0x03	; 3
    17e2:	91 05       	cpc	r25, r1
    17e4:	81 f0       	breq	.+32     	; 0x1806 <GPIO_readPort+0x74>
    17e6:	13 c0       	rjmp	.+38     	; 0x180e <GPIO_readPort+0x7c>
		{
		case PORTA_ID:
			portValue =  PINA;
    17e8:	e9 e3       	ldi	r30, 0x39	; 57
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	0e c0       	rjmp	.+28     	; 0x180e <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			portValue =  PINB;
    17f2:	e6 e3       	ldi	r30, 0x36	; 54
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	09 c0       	rjmp	.+18     	; 0x180e <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			portValue =  PINC;
    17fc:	e3 e3       	ldi	r30, 0x33	; 51
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	04 c0       	rjmp	.+8      	; 0x180e <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			portValue =  PIND;
    1806:	e0 e3       	ldi	r30, 0x30	; 48
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return portValue;
    180e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	2e 97       	sbiw	r28, 0x0e	; 14
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1832:	83 e0       	ldi	r24, 0x03	; 3
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	41 e0       	ldi	r20, 0x01	; 1
    1838:	0e 94 99 08 	call	0x1132	; 0x1132 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    183c:	83 e0       	ldi	r24, 0x03	; 3
    183e:	62 e0       	ldi	r22, 0x02	; 2
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	0e 94 99 08 	call	0x1132	; 0x1132 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	61 e0       	ldi	r22, 0x01	; 1
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	0e 94 99 08 	call	0x1132	; 0x1132 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);            /* LCD Write Mode */
    1850:	83 e0       	ldi	r24, 0x03	; 3
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	a0 ea       	ldi	r26, 0xA0	; 160
    1860:	b1 e4       	ldi	r27, 0x41	; 65
    1862:	8b 87       	std	Y+11, r24	; 0x0b
    1864:	9c 87       	std	Y+12, r25	; 0x0c
    1866:	ad 87       	std	Y+13, r26	; 0x0d
    1868:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186a:	6b 85       	ldd	r22, Y+11	; 0x0b
    186c:	7c 85       	ldd	r23, Y+12	; 0x0c
    186e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1870:	9e 85       	ldd	r25, Y+14	; 0x0e
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	4a e7       	ldi	r20, 0x7A	; 122
    1878:	53 e4       	ldi	r21, 0x43	; 67
    187a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	8f 83       	std	Y+7, r24	; 0x07
    1884:	98 87       	std	Y+8, r25	; 0x08
    1886:	a9 87       	std	Y+9, r26	; 0x09
    1888:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    188a:	6f 81       	ldd	r22, Y+7	; 0x07
    188c:	78 85       	ldd	r23, Y+8	; 0x08
    188e:	89 85       	ldd	r24, Y+9	; 0x09
    1890:	9a 85       	ldd	r25, Y+10	; 0x0a
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e8       	ldi	r20, 0x80	; 128
    1898:	5f e3       	ldi	r21, 0x3F	; 63
    189a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    189e:	88 23       	and	r24, r24
    18a0:	2c f4       	brge	.+10     	; 0x18ac <LCD_init+0x8e>
		__ticks = 1;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	3f c0       	rjmp	.+126    	; 0x192a <LCD_init+0x10c>
	else if (__tmp > 65535)
    18ac:	6f 81       	ldd	r22, Y+7	; 0x07
    18ae:	78 85       	ldd	r23, Y+8	; 0x08
    18b0:	89 85       	ldd	r24, Y+9	; 0x09
    18b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	3f ef       	ldi	r19, 0xFF	; 255
    18b8:	4f e7       	ldi	r20, 0x7F	; 127
    18ba:	57 e4       	ldi	r21, 0x47	; 71
    18bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18c0:	18 16       	cp	r1, r24
    18c2:	4c f5       	brge	.+82     	; 0x1916 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e2       	ldi	r20, 0x20	; 32
    18d2:	51 e4       	ldi	r21, 0x41	; 65
    18d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	9e 83       	std	Y+6, r25	; 0x06
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	0f c0       	rjmp	.+30     	; 0x190c <LCD_init+0xee>
    18ee:	89 e1       	ldi	r24, 0x19	; 25
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9c 83       	std	Y+4, r25	; 0x04
    18f4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <LCD_init+0xdc>
    18fe:	9c 83       	std	Y+4, r25	; 0x04
    1900:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	69 f7       	brne	.-38     	; 0x18ee <LCD_init+0xd0>
    1914:	14 c0       	rjmp	.+40     	; 0x193e <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1916:	6f 81       	ldd	r22, Y+7	; 0x07
    1918:	78 85       	ldd	r23, Y+8	; 0x08
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	9a 85       	ldd	r25, Y+10	; 0x0a
    191e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	9e 81       	ldd	r25, Y+6	; 0x06
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <LCD_init+0x118>
    193a:	9a 83       	std	Y+2, r25	; 0x02
    193c:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	6f ef       	ldi	r22, 0xFF	; 255
    1942:	0e 94 41 0b 	call	0x1682	; 0x1682 <GPIO_setupPortDirection>

	/* Use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1946:	88 e3       	ldi	r24, 0x38	; 56
    1948:	0e 94 b5 0c 	call	0x196a	; 0x196a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF);      /* Cursor off */
    194c:	8c e0       	ldi	r24, 0x0C	; 12
    194e:	0e 94 b5 0c 	call	0x196a	; 0x196a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN);    /* Clear LCD at the beginning */
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	0e 94 b5 0c 	call	0x196a	; 0x196a <LCD_sendCommand>
}
    1958:	2e 96       	adiw	r28, 0x0e	; 14
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	e9 97       	sbiw	r28, 0x39	; 57
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);   /* Instruction Mode RS=0 */
    1980:	83 e0       	ldi	r24, 0x03	; 3
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	a0 e8       	ldi	r26, 0x80	; 128
    1990:	bf e3       	ldi	r27, 0x3F	; 63
    1992:	8d ab       	std	Y+53, r24	; 0x35
    1994:	9e ab       	std	Y+54, r25	; 0x36
    1996:	af ab       	std	Y+55, r26	; 0x37
    1998:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199a:	6d a9       	ldd	r22, Y+53	; 0x35
    199c:	7e a9       	ldd	r23, Y+54	; 0x36
    199e:	8f a9       	ldd	r24, Y+55	; 0x37
    19a0:	98 ad       	ldd	r25, Y+56	; 0x38
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	4a e7       	ldi	r20, 0x7A	; 122
    19a8:	53 e4       	ldi	r21, 0x43	; 67
    19aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	89 ab       	std	Y+49, r24	; 0x31
    19b4:	9a ab       	std	Y+50, r25	; 0x32
    19b6:	ab ab       	std	Y+51, r26	; 0x33
    19b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ba:	69 a9       	ldd	r22, Y+49	; 0x31
    19bc:	7a a9       	ldd	r23, Y+50	; 0x32
    19be:	8b a9       	ldd	r24, Y+51	; 0x33
    19c0:	9c a9       	ldd	r25, Y+52	; 0x34
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e8       	ldi	r20, 0x80	; 128
    19c8:	5f e3       	ldi	r21, 0x3F	; 63
    19ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19ce:	88 23       	and	r24, r24
    19d0:	2c f4       	brge	.+10     	; 0x19dc <LCD_sendCommand+0x72>
		__ticks = 1;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	98 ab       	std	Y+48, r25	; 0x30
    19d8:	8f a7       	std	Y+47, r24	; 0x2f
    19da:	3f c0       	rjmp	.+126    	; 0x1a5a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    19dc:	69 a9       	ldd	r22, Y+49	; 0x31
    19de:	7a a9       	ldd	r23, Y+50	; 0x32
    19e0:	8b a9       	ldd	r24, Y+51	; 0x33
    19e2:	9c a9       	ldd	r25, Y+52	; 0x34
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	3f ef       	ldi	r19, 0xFF	; 255
    19e8:	4f e7       	ldi	r20, 0x7F	; 127
    19ea:	57 e4       	ldi	r21, 0x47	; 71
    19ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19f0:	18 16       	cp	r1, r24
    19f2:	4c f5       	brge	.+82     	; 0x1a46 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f4:	6d a9       	ldd	r22, Y+53	; 0x35
    19f6:	7e a9       	ldd	r23, Y+54	; 0x36
    19f8:	8f a9       	ldd	r24, Y+55	; 0x37
    19fa:	98 ad       	ldd	r25, Y+56	; 0x38
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e2       	ldi	r20, 0x20	; 32
    1a02:	51 e4       	ldi	r21, 0x41	; 65
    1a04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	98 ab       	std	Y+48, r25	; 0x30
    1a1a:	8f a7       	std	Y+47, r24	; 0x2f
    1a1c:	0f c0       	rjmp	.+30     	; 0x1a3c <LCD_sendCommand+0xd2>
    1a1e:	89 e1       	ldi	r24, 0x19	; 25
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9e a7       	std	Y+46, r25	; 0x2e
    1a24:	8d a7       	std	Y+45, r24	; 0x2d
    1a26:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a28:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <LCD_sendCommand+0xc0>
    1a2e:	9e a7       	std	Y+46, r25	; 0x2e
    1a30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a34:	98 a9       	ldd	r25, Y+48	; 0x30
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	98 ab       	std	Y+48, r25	; 0x30
    1a3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	69 f7       	brne	.-38     	; 0x1a1e <LCD_sendCommand+0xb4>
    1a44:	14 c0       	rjmp	.+40     	; 0x1a6e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a46:	69 a9       	ldd	r22, Y+49	; 0x31
    1a48:	7a a9       	ldd	r23, Y+50	; 0x32
    1a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	98 ab       	std	Y+48, r25	; 0x30
    1a58:	8f a7       	std	Y+47, r24	; 0x2f
    1a5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a5e:	9c a7       	std	Y+44, r25	; 0x2c
    1a60:	8b a7       	std	Y+43, r24	; 0x2b
    1a62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a64:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <LCD_sendCommand+0xfc>
    1a6a:	9c a7       	std	Y+44, r25	; 0x2c
    1a6c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);                                              /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);    /* Enable LCD E=1 */
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	62 e0       	ldi	r22, 0x02	; 2
    1a72:	41 e0       	ldi	r20, 0x01	; 1
    1a74:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	a0 e8       	ldi	r26, 0x80	; 128
    1a7e:	bf e3       	ldi	r27, 0x3F	; 63
    1a80:	8f a3       	std	Y+39, r24	; 0x27
    1a82:	98 a7       	std	Y+40, r25	; 0x28
    1a84:	a9 a7       	std	Y+41, r26	; 0x29
    1a86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a88:	6f a1       	ldd	r22, Y+39	; 0x27
    1a8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4a e7       	ldi	r20, 0x7A	; 122
    1a96:	53 e4       	ldi	r21, 0x43	; 67
    1a98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8b a3       	std	Y+35, r24	; 0x23
    1aa2:	9c a3       	std	Y+36, r25	; 0x24
    1aa4:	ad a3       	std	Y+37, r26	; 0x25
    1aa6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1aa8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aaa:	7c a1       	ldd	r23, Y+36	; 0x24
    1aac:	8d a1       	ldd	r24, Y+37	; 0x25
    1aae:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	2c f4       	brge	.+10     	; 0x1aca <LCD_sendCommand+0x160>
		__ticks = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9a a3       	std	Y+34, r25	; 0x22
    1ac6:	89 a3       	std	Y+33, r24	; 0x21
    1ac8:	3f c0       	rjmp	.+126    	; 0x1b48 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1aca:	6b a1       	ldd	r22, Y+35	; 0x23
    1acc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ace:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	4c f5       	brge	.+82     	; 0x1b34 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ae4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9a a3       	std	Y+34, r25	; 0x22
    1b08:	89 a3       	std	Y+33, r24	; 0x21
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <LCD_sendCommand+0x1c0>
    1b0c:	89 e1       	ldi	r24, 0x19	; 25
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	98 a3       	std	Y+32, r25	; 0x20
    1b12:	8f 8f       	std	Y+31, r24	; 0x1f
    1b14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b16:	98 a1       	ldd	r25, Y+32	; 0x20
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_sendCommand+0x1ae>
    1b1c:	98 a3       	std	Y+32, r25	; 0x20
    1b1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	89 a1       	ldd	r24, Y+33	; 0x21
    1b22:	9a a1       	ldd	r25, Y+34	; 0x22
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	9a a3       	std	Y+34, r25	; 0x22
    1b28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <LCD_sendCommand+0x1a2>
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	6b a1       	ldd	r22, Y+35	; 0x23
    1b36:	7c a1       	ldd	r23, Y+36	; 0x24
    1b38:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9a a3       	std	Y+34, r25	; 0x22
    1b46:	89 a3       	std	Y+33, r24	; 0x21
    1b48:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <LCD_sendCommand+0x1ea>
    1b58:	9e 8f       	std	Y+30, r25	; 0x1e
    1b5a:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);      /* Disable LCD E=0 */
	_delay_ms(1);                                               /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, command);             /* Out the required command to the data bus D0 --> D7 */
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	69 ad       	ldd	r22, Y+57	; 0x39
    1b60:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePort>
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	a0 e8       	ldi	r26, 0x80	; 128
    1b6a:	bf e3       	ldi	r27, 0x3F	; 63
    1b6c:	89 8f       	std	Y+25, r24	; 0x19
    1b6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b70:	ab 8f       	std	Y+27, r26	; 0x1b
    1b72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b74:	69 8d       	ldd	r22, Y+25	; 0x19
    1b76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4a e7       	ldi	r20, 0x7A	; 122
    1b82:	53 e4       	ldi	r21, 0x43	; 67
    1b84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	8d 8b       	std	Y+21, r24	; 0x15
    1b8e:	9e 8b       	std	Y+22, r25	; 0x16
    1b90:	af 8b       	std	Y+23, r26	; 0x17
    1b92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b94:	6d 89       	ldd	r22, Y+21	; 0x15
    1b96:	7e 89       	ldd	r23, Y+22	; 0x16
    1b98:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9c 8b       	std	Y+20, r25	; 0x14
    1bb2:	8b 8b       	std	Y+19, r24	; 0x13
    1bb4:	3f c0       	rjmp	.+126    	; 0x1c34 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bba:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	3f ef       	ldi	r19, 0xFF	; 255
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	57 e4       	ldi	r21, 0x47	; 71
    1bc6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	4c f5       	brge	.+82     	; 0x1c20 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bce:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9c 8b       	std	Y+20, r25	; 0x14
    1bf4:	8b 8b       	std	Y+19, r24	; 0x13
    1bf6:	0f c0       	rjmp	.+30     	; 0x1c16 <LCD_sendCommand+0x2ac>
    1bf8:	89 e1       	ldi	r24, 0x19	; 25
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9a 8b       	std	Y+18, r25	; 0x12
    1bfe:	89 8b       	std	Y+17, r24	; 0x11
    1c00:	89 89       	ldd	r24, Y+17	; 0x11
    1c02:	9a 89       	ldd	r25, Y+18	; 0x12
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD_sendCommand+0x29a>
    1c08:	9a 8b       	std	Y+18, r25	; 0x12
    1c0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	9c 8b       	std	Y+20, r25	; 0x14
    1c14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c16:	8b 89       	ldd	r24, Y+19	; 0x13
    1c18:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	69 f7       	brne	.-38     	; 0x1bf8 <LCD_sendCommand+0x28e>
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c20:	6d 89       	ldd	r22, Y+21	; 0x15
    1c22:	7e 89       	ldd	r23, Y+22	; 0x16
    1c24:	8f 89       	ldd	r24, Y+23	; 0x17
    1c26:	98 8d       	ldd	r25, Y+24	; 0x18
    1c28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	9c 8b       	std	Y+20, r25	; 0x14
    1c32:	8b 8b       	std	Y+19, r24	; 0x13
    1c34:	8b 89       	ldd	r24, Y+19	; 0x13
    1c36:	9c 89       	ldd	r25, Y+20	; 0x14
    1c38:	98 8b       	std	Y+16, r25	; 0x10
    1c3a:	8f 87       	std	Y+15, r24	; 0x0f
    1c3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c3e:	98 89       	ldd	r25, Y+16	; 0x10
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <LCD_sendCommand+0x2d6>
    1c44:	98 8b       	std	Y+16, r25	; 0x10
    1c46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);                                          /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	62 e0       	ldi	r22, 0x02	; 2
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 e8       	ldi	r26, 0x80	; 128
    1c58:	bf e3       	ldi	r27, 0x3F	; 63
    1c5a:	8b 87       	std	Y+11, r24	; 0x0b
    1c5c:	9c 87       	std	Y+12, r25	; 0x0c
    1c5e:	ad 87       	std	Y+13, r26	; 0x0d
    1c60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a e7       	ldi	r20, 0x7A	; 122
    1c70:	53 e4       	ldi	r21, 0x43	; 67
    1c72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	8f 83       	std	Y+7, r24	; 0x07
    1c7c:	98 87       	std	Y+8, r25	; 0x08
    1c7e:	a9 87       	std	Y+9, r26	; 0x09
    1c80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c82:	6f 81       	ldd	r22, Y+7	; 0x07
    1c84:	78 85       	ldd	r23, Y+8	; 0x08
    1c86:	89 85       	ldd	r24, Y+9	; 0x09
    1c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca6:	78 85       	ldd	r23, Y+8	; 0x08
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <LCD_sendCommand+0x39a>
    1ce6:	89 e1       	ldi	r24, 0x19	; 25
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9c 83       	std	Y+4, r25	; 0x04
    1cec:	8b 83       	std	Y+3, r24	; 0x03
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_sendCommand+0x388>
    1cf6:	9c 83       	std	Y+4, r25	; 0x04
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9e 83       	std	Y+6, r25	; 0x06
    1d02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	9e 81       	ldd	r25, Y+6	; 0x06
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <LCD_sendCommand+0x37c>
    1d0c:	14 c0       	rjmp	.+40     	; 0x1d36 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_sendCommand+0x3c4>
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);                                          /* delay for processing Th = 13ns */

#endif

}
    1d36:	e9 96       	adiw	r28, 0x39	; 57
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	e9 97       	sbiw	r28, 0x39	; 57
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);  /* DATA Mode RS=1 */
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e8       	ldi	r26, 0x80	; 128
    1d6e:	bf e3       	ldi	r27, 0x3F	; 63
    1d70:	8d ab       	std	Y+53, r24	; 0x35
    1d72:	9e ab       	std	Y+54, r25	; 0x36
    1d74:	af ab       	std	Y+55, r26	; 0x37
    1d76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	6d a9       	ldd	r22, Y+53	; 0x35
    1d7a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d7c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d7e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a e7       	ldi	r20, 0x7A	; 122
    1d86:	53 e4       	ldi	r21, 0x43	; 67
    1d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	89 ab       	std	Y+49, r24	; 0x31
    1d92:	9a ab       	std	Y+50, r25	; 0x32
    1d94:	ab ab       	std	Y+51, r26	; 0x33
    1d96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d98:	69 a9       	ldd	r22, Y+49	; 0x31
    1d9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <LCD_displayCharacter+0x72>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	98 ab       	std	Y+48, r25	; 0x30
    1db6:	8f a7       	std	Y+47, r24	; 0x2f
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1dba:	69 a9       	ldd	r22, Y+49	; 0x31
    1dbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd4:	7e a9       	ldd	r23, Y+54	; 0x36
    1dd6:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd8:	98 ad       	ldd	r25, Y+56	; 0x38
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	98 ab       	std	Y+48, r25	; 0x30
    1df8:	8f a7       	std	Y+47, r24	; 0x2f
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <LCD_displayCharacter+0xd2>
    1dfc:	89 e1       	ldi	r24, 0x19	; 25
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9e a7       	std	Y+46, r25	; 0x2e
    1e02:	8d a7       	std	Y+45, r24	; 0x2d
    1e04:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e06:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_displayCharacter+0xc0>
    1e0c:	9e a7       	std	Y+46, r25	; 0x2e
    1e0e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e12:	98 a9       	ldd	r25, Y+48	; 0x30
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	98 ab       	std	Y+48, r25	; 0x30
    1e18:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <LCD_displayCharacter+0xb4>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	69 a9       	ldd	r22, Y+49	; 0x31
    1e26:	7a a9       	ldd	r23, Y+50	; 0x32
    1e28:	8b a9       	ldd	r24, Y+51	; 0x33
    1e2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	98 ab       	std	Y+48, r25	; 0x30
    1e36:	8f a7       	std	Y+47, r24	; 0x2f
    1e38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e3c:	9c a7       	std	Y+44, r25	; 0x2c
    1e3e:	8b a7       	std	Y+43, r24	; 0x2b
    1e40:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e42:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_displayCharacter+0xfc>
    1e48:	9c a7       	std	Y+44, r25	; 0x2c
    1e4a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);                                              /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);    /* Enable LCD E=1 */
    1e4c:	83 e0       	ldi	r24, 0x03	; 3
    1e4e:	62 e0       	ldi	r22, 0x02	; 2
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a0 e8       	ldi	r26, 0x80	; 128
    1e5c:	bf e3       	ldi	r27, 0x3F	; 63
    1e5e:	8f a3       	std	Y+39, r24	; 0x27
    1e60:	98 a7       	std	Y+40, r25	; 0x28
    1e62:	a9 a7       	std	Y+41, r26	; 0x29
    1e64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e66:	6f a1       	ldd	r22, Y+39	; 0x27
    1e68:	78 a5       	ldd	r23, Y+40	; 0x28
    1e6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a e7       	ldi	r20, 0x7A	; 122
    1e74:	53 e4       	ldi	r21, 0x43	; 67
    1e76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	8b a3       	std	Y+35, r24	; 0x23
    1e80:	9c a3       	std	Y+36, r25	; 0x24
    1e82:	ad a3       	std	Y+37, r26	; 0x25
    1e84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e86:	6b a1       	ldd	r22, Y+35	; 0x23
    1e88:	7c a1       	ldd	r23, Y+36	; 0x24
    1e8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9a a3       	std	Y+34, r25	; 0x22
    1ea4:	89 a3       	std	Y+33, r24	; 0x21
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1ea8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eaa:	7c a1       	ldd	r23, Y+36	; 0x24
    1eac:	8d a1       	ldd	r24, Y+37	; 0x25
    1eae:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	4c f5       	brge	.+82     	; 0x1f12 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9a a3       	std	Y+34, r25	; 0x22
    1ee6:	89 a3       	std	Y+33, r24	; 0x21
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <LCD_displayCharacter+0x1c0>
    1eea:	89 e1       	ldi	r24, 0x19	; 25
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	98 a3       	std	Y+32, r25	; 0x20
    1ef0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ef2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ef4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_displayCharacter+0x1ae>
    1efa:	98 a3       	std	Y+32, r25	; 0x20
    1efc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efe:	89 a1       	ldd	r24, Y+33	; 0x21
    1f00:	9a a1       	ldd	r25, Y+34	; 0x22
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	9a a3       	std	Y+34, r25	; 0x22
    1f06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <LCD_displayCharacter+0x1a2>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	6b a1       	ldd	r22, Y+35	; 0x23
    1f14:	7c a1       	ldd	r23, Y+36	; 0x24
    1f16:	8d a1       	ldd	r24, Y+37	; 0x25
    1f18:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9a a3       	std	Y+34, r25	; 0x22
    1f24:	89 a3       	std	Y+33, r24	; 0x21
    1f26:	89 a1       	ldd	r24, Y+33	; 0x21
    1f28:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f2c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_displayCharacter+0x1ea>
    1f36:	9e 8f       	std	Y+30, r25	; 0x1e
    1f38:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);      /* Disable LCD E=0 */
	_delay_ms(1);                                               /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, data);                /* Out the required data to the data bus D0 --> D7 */
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	69 ad       	ldd	r22, Y+57	; 0x39
    1f3e:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePort>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	a0 e8       	ldi	r26, 0x80	; 128
    1f48:	bf e3       	ldi	r27, 0x3F	; 63
    1f4a:	89 8f       	std	Y+25, r24	; 0x19
    1f4c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f4e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f52:	69 8d       	ldd	r22, Y+25	; 0x19
    1f54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	4a e7       	ldi	r20, 0x7A	; 122
    1f60:	53 e4       	ldi	r21, 0x43	; 67
    1f62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	8d 8b       	std	Y+21, r24	; 0x15
    1f6c:	9e 8b       	std	Y+22, r25	; 0x16
    1f6e:	af 8b       	std	Y+23, r26	; 0x17
    1f70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f72:	6d 89       	ldd	r22, Y+21	; 0x15
    1f74:	7e 89       	ldd	r23, Y+22	; 0x16
    1f76:	8f 89       	ldd	r24, Y+23	; 0x17
    1f78:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e8       	ldi	r20, 0x80	; 128
    1f80:	5f e3       	ldi	r21, 0x3F	; 63
    1f82:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f86:	88 23       	and	r24, r24
    1f88:	2c f4       	brge	.+10     	; 0x1f94 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	9c 8b       	std	Y+20, r25	; 0x14
    1f90:	8b 8b       	std	Y+19, r24	; 0x13
    1f92:	3f c0       	rjmp	.+126    	; 0x2012 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1f94:	6d 89       	ldd	r22, Y+21	; 0x15
    1f96:	7e 89       	ldd	r23, Y+22	; 0x16
    1f98:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	3f ef       	ldi	r19, 0xFF	; 255
    1fa0:	4f e7       	ldi	r20, 0x7F	; 127
    1fa2:	57 e4       	ldi	r21, 0x47	; 71
    1fa4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fa8:	18 16       	cp	r1, r24
    1faa:	4c f5       	brge	.+82     	; 0x1ffe <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fac:	69 8d       	ldd	r22, Y+25	; 0x19
    1fae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e2       	ldi	r20, 0x20	; 32
    1fba:	51 e4       	ldi	r21, 0x41	; 65
    1fbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	9c 8b       	std	Y+20, r25	; 0x14
    1fd2:	8b 8b       	std	Y+19, r24	; 0x13
    1fd4:	0f c0       	rjmp	.+30     	; 0x1ff4 <LCD_displayCharacter+0x2ac>
    1fd6:	89 e1       	ldi	r24, 0x19	; 25
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9a 8b       	std	Y+18, r25	; 0x12
    1fdc:	89 8b       	std	Y+17, r24	; 0x11
    1fde:	89 89       	ldd	r24, Y+17	; 0x11
    1fe0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCD_displayCharacter+0x29a>
    1fe6:	9a 8b       	std	Y+18, r25	; 0x12
    1fe8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fea:	8b 89       	ldd	r24, Y+19	; 0x13
    1fec:	9c 89       	ldd	r25, Y+20	; 0x14
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	9c 8b       	std	Y+20, r25	; 0x14
    1ff2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	69 f7       	brne	.-38     	; 0x1fd6 <LCD_displayCharacter+0x28e>
    1ffc:	14 c0       	rjmp	.+40     	; 0x2026 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    2000:	7e 89       	ldd	r23, Y+22	; 0x16
    2002:	8f 89       	ldd	r24, Y+23	; 0x17
    2004:	98 8d       	ldd	r25, Y+24	; 0x18
    2006:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	9c 8b       	std	Y+20, r25	; 0x14
    2010:	8b 8b       	std	Y+19, r24	; 0x13
    2012:	8b 89       	ldd	r24, Y+19	; 0x13
    2014:	9c 89       	ldd	r25, Y+20	; 0x14
    2016:	98 8b       	std	Y+16, r25	; 0x10
    2018:	8f 87       	std	Y+15, r24	; 0x0f
    201a:	8f 85       	ldd	r24, Y+15	; 0x0f
    201c:	98 89       	ldd	r25, Y+16	; 0x10
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_displayCharacter+0x2d6>
    2022:	98 8b       	std	Y+16, r25	; 0x10
    2024:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);                                          /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2026:	83 e0       	ldi	r24, 0x03	; 3
    2028:	62 e0       	ldi	r22, 0x02	; 2
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e8       	ldi	r26, 0x80	; 128
    2036:	bf e3       	ldi	r27, 0x3F	; 63
    2038:	8b 87       	std	Y+11, r24	; 0x0b
    203a:	9c 87       	std	Y+12, r25	; 0x0c
    203c:	ad 87       	std	Y+13, r26	; 0x0d
    203e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2040:	6b 85       	ldd	r22, Y+11	; 0x0b
    2042:	7c 85       	ldd	r23, Y+12	; 0x0c
    2044:	8d 85       	ldd	r24, Y+13	; 0x0d
    2046:	9e 85       	ldd	r25, Y+14	; 0x0e
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	4a e7       	ldi	r20, 0x7A	; 122
    204e:	53 e4       	ldi	r21, 0x43	; 67
    2050:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	8f 83       	std	Y+7, r24	; 0x07
    205a:	98 87       	std	Y+8, r25	; 0x08
    205c:	a9 87       	std	Y+9, r26	; 0x09
    205e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2060:	6f 81       	ldd	r22, Y+7	; 0x07
    2062:	78 85       	ldd	r23, Y+8	; 0x08
    2064:	89 85       	ldd	r24, Y+9	; 0x09
    2066:	9a 85       	ldd	r25, Y+10	; 0x0a
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	5f e3       	ldi	r21, 0x3F	; 63
    2070:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2074:	88 23       	and	r24, r24
    2076:	2c f4       	brge	.+10     	; 0x2082 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	3f c0       	rjmp	.+126    	; 0x2100 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	3f ef       	ldi	r19, 0xFF	; 255
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	57 e4       	ldi	r21, 0x47	; 71
    2092:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	4c f5       	brge	.+82     	; 0x20ec <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209a:	6b 85       	ldd	r22, Y+11	; 0x0b
    209c:	7c 85       	ldd	r23, Y+12	; 0x0c
    209e:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e2       	ldi	r20, 0x20	; 32
    20a8:	51 e4       	ldi	r21, 0x41	; 65
    20aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
    20c2:	0f c0       	rjmp	.+30     	; 0x20e2 <LCD_displayCharacter+0x39a>
    20c4:	89 e1       	ldi	r24, 0x19	; 25
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <LCD_displayCharacter+0x388>
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	69 f7       	brne	.-38     	; 0x20c4 <LCD_displayCharacter+0x37c>
    20ea:	14 c0       	rjmp	.+40     	; 0x2114 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_displayCharacter+0x3c4>
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);                                          /* delay for processing Th = 13ns */

#endif

}
    2114:	e9 96       	adiw	r28, 0x39	; 57
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	00 d0       	rcall	.+0      	; 0x212c <LCD_displayString+0x6>
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	9a 83       	std	Y+2, r25	; 0x02
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	0a c0       	rjmp	.+20     	; 0x214a <LCD_displayString+0x24>
	while ((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    2136:	e9 81       	ldd	r30, Y+1	; 0x01
    2138:	fa 81       	ldd	r31, Y+2	; 0x02
    213a:	80 81       	ld	r24, Z
    213c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <LCD_displayCharacter>
		Str++;
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	while ((*Str) != '\0')
    214a:	e9 81       	ldd	r30, Y+1	; 0x01
    214c:	fa 81       	ldd	r31, Y+2	; 0x02
    214e:	80 81       	ld	r24, Z
    2150:	88 23       	and	r24, r24
    2152:	89 f7       	brne	.-30     	; 0x2136 <LCD_displayString+0x10>
	while (Str[i] != '\0') {
		LCD_displayCharacter(Str[i]);
		i++;
	}
	 *********************************************************/
}
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	00 d0       	rcall	.+0      	; 0x2164 <LCD_moveCursor+0x6>
    2164:	00 d0       	rcall	.+0      	; 0x2166 <LCD_moveCursor+0x8>
    2166:	0f 92       	push	r0
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	8a 83       	std	Y+2, r24	; 0x02
    216e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memoryAddress;

	/* Calculate the required address in the LCD DDRAM */
	switch (row) {
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	3d 83       	std	Y+5, r19	; 0x05
    2178:	2c 83       	std	Y+4, r18	; 0x04
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	9d 81       	ldd	r25, Y+5	; 0x05
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	91 05       	cpc	r25, r1
    2182:	c1 f0       	breq	.+48     	; 0x21b4 <LCD_moveCursor+0x56>
    2184:	2c 81       	ldd	r18, Y+4	; 0x04
    2186:	3d 81       	ldd	r19, Y+5	; 0x05
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	2c f4       	brge	.+10     	; 0x2198 <LCD_moveCursor+0x3a>
    218e:	8c 81       	ldd	r24, Y+4	; 0x04
    2190:	9d 81       	ldd	r25, Y+5	; 0x05
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	61 f0       	breq	.+24     	; 0x21ae <LCD_moveCursor+0x50>
    2196:	19 c0       	rjmp	.+50     	; 0x21ca <LCD_moveCursor+0x6c>
    2198:	2c 81       	ldd	r18, Y+4	; 0x04
    219a:	3d 81       	ldd	r19, Y+5	; 0x05
    219c:	22 30       	cpi	r18, 0x02	; 2
    219e:	31 05       	cpc	r19, r1
    21a0:	69 f0       	breq	.+26     	; 0x21bc <LCD_moveCursor+0x5e>
    21a2:	8c 81       	ldd	r24, Y+4	; 0x04
    21a4:	9d 81       	ldd	r25, Y+5	; 0x05
    21a6:	83 30       	cpi	r24, 0x03	; 3
    21a8:	91 05       	cpc	r25, r1
    21aa:	61 f0       	breq	.+24     	; 0x21c4 <LCD_moveCursor+0x66>
    21ac:	0e c0       	rjmp	.+28     	; 0x21ca <LCD_moveCursor+0x6c>
	case 0:
		lcd_memoryAddress = col;
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	0b c0       	rjmp	.+22     	; 0x21ca <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memoryAddress = col + 0x40;
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	80 5c       	subi	r24, 0xC0	; 192
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	07 c0       	rjmp	.+14     	; 0x21ca <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memoryAddress = col + 0x10;
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	80 5f       	subi	r24, 0xF0	; 240
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memoryAddress = col + 0x50;
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	80 5b       	subi	r24, 0xB0	; 176
    21c8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* Move the LCD cursor to this specific address */
	LCD_sendCommand( lcd_memoryAddress | LCD_SET_CURSOR_LOCATION);
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	80 68       	ori	r24, 0x80	; 128
    21ce:	0e 94 b5 0c 	call	0x196a	; 0x196a <LCD_sendCommand>
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <LCD_displayStringRowColumn+0x6>
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <LCD_displayStringRowColumn+0x8>
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	6a 83       	std	Y+2, r22	; 0x02
    21f2:	5c 83       	std	Y+4, r21	; 0x04
    21f4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);     /* go to to the required LCD position */
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	6a 81       	ldd	r22, Y+2	; 0x02
    21fa:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_moveCursor>
	LCD_displayString(Str);       /* display the string */
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	0e 94 93 10 	call	0x2126	; 0x2126 <LCD_displayString>
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	62 97       	sbiw	r28, 0x12	; 18
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	9a 8b       	std	Y+18, r25	; 0x12
    222a:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];             /* String to hold the ASCII result */
	itoa(data, buff, 10);      /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    222c:	89 89       	ldd	r24, Y+17	; 0x11
    222e:	9a 89       	ldd	r25, Y+18	; 0x12
    2230:	9e 01       	movw	r18, r28
    2232:	2f 5f       	subi	r18, 0xFF	; 255
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	b9 01       	movw	r22, r18
    2238:	4a e0       	ldi	r20, 0x0A	; 10
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <itoa>
	LCD_displayString(buff);   /* Display the string */
    2240:	ce 01       	movw	r24, r28
    2242:	01 96       	adiw	r24, 0x01	; 1
    2244:	0e 94 93 10 	call	0x2126	; 0x2126 <LCD_displayString>
}
    2248:	62 96       	adiw	r28, 0x12	; 18
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN); /* Send clear display command */
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	0e 94 b5 0c 	call	0x196a	; 0x196a <LCD_sendCommand>
}
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <LM35_GetTemperature>:

/* Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_GetTemperature(void)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	00 d0       	rcall	.+0      	; 0x2274 <LM35_GetTemperature+0x6>
    2274:	0f 92       	push	r0
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
	uint8 tempValue = 0;
    227a:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adcValue = 0;
    227c:	1a 82       	std	Y+2, r1	; 0x02
    227e:	19 82       	std	Y+1, r1	; 0x01

	adcValue = ADC_readChannel(SENSOR_CHANNEL_ID);
    2280:	82 e0       	ldi	r24, 0x02	; 2
    2282:	0e 94 fa 07 	call	0xff4	; 0xff4 <ADC_readChannel>
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	89 83       	std	Y+1, r24	; 0x01

	tempValue = (uint8) (((float32) adcValue * ADC_REF_VOLT_VALUE * SENSOR_MAX_TEMPERATURE)/(SENSOR_MAX_VOLTAGE * ADC_MAXIMUM_VALUE));
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	9a 81       	ldd	r25, Y+2	; 0x02
    228e:	cc 01       	movw	r24, r24
    2290:	a0 e0       	ldi	r26, 0x00	; 0
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	2a e0       	ldi	r18, 0x0A	; 10
    22a6:	37 ed       	ldi	r19, 0xD7	; 215
    22a8:	43 e2       	ldi	r20, 0x23	; 35
    22aa:	50 e4       	ldi	r21, 0x40	; 64
    22ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	bc 01       	movw	r22, r24
    22b6:	cd 01       	movw	r24, r26
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	46 e1       	ldi	r20, 0x16	; 22
    22be:	53 e4       	ldi	r21, 0x43	; 67
    22c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	bc 01       	movw	r22, r24
    22ca:	cd 01       	movw	r24, r26
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 ed       	ldi	r19, 0xD0	; 208
    22d0:	4f eb       	ldi	r20, 0xBF	; 191
    22d2:	54 e4       	ldi	r21, 0x44	; 68
    22d4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	8b 83       	std	Y+3, r24	; 0x03

	return tempValue;
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <PWM_Timer0_Start>:
• Inputs:
	➢ duty_cycle: The required duty cycle percentage of the generated PWM signal. Its value should be from 0 → 100
• Return: None
*/
void PWM_Timer0_Start(uint8 duty_cycle)
{
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	0f 92       	push	r0
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0;     /* Set Timer Initial value to ZERO */
    2308:	e2 e5       	ldi	r30, 0x52	; 82
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	10 82       	st	Z, r1
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. Clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    230e:	e3 e5       	ldi	r30, 0x53	; 83
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	8a e6       	ldi	r24, 0x6A	; 106
    2314:	80 83       	st	Z, r24

	OCR0  = (duty_cycle/100.0) * 255;      /* Set Compare Value (Duty Cycle here is Percentage) */
    2316:	0c e5       	ldi	r16, 0x5C	; 92
    2318:	10 e0       	ldi	r17, 0x00	; 0
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	88 2f       	mov	r24, r24
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	aa 27       	eor	r26, r26
    2322:	97 fd       	sbrc	r25, 7
    2324:	a0 95       	com	r26
    2326:	ba 2f       	mov	r27, r26
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	bc 01       	movw	r22, r24
    2336:	cd 01       	movw	r24, r26
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	48 ec       	ldi	r20, 0xC8	; 200
    233e:	52 e4       	ldi	r21, 0x42	; 66
    2340:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	53 e4       	ldi	r21, 0x43	; 67
    2354:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	bc 01       	movw	r22, r24
    235e:	cd 01       	movw	r24, r26
    2360:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	f8 01       	movw	r30, r16
    236a:	80 83       	st	Z, r24

	GPIO_setupPinDirection(OC0_PORT_ID, OC0_PIN_ID, PIN_OUTPUT); /* Set PB3/OC0 as Output pin --> pin where the PWM signal is generated from MC. */
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	63 e0       	ldi	r22, 0x03	; 3
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0e 94 99 08 	call	0x1132	; 0x1132 <GPIO_setupPinDirection>

}
    2376:	0f 90       	pop	r0
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	1f 91       	pop	r17
    237e:	0f 91       	pop	r16
    2380:	08 95       	ret

00002382 <__prologue_saves__>:
    2382:	2f 92       	push	r2
    2384:	3f 92       	push	r3
    2386:	4f 92       	push	r4
    2388:	5f 92       	push	r5
    238a:	6f 92       	push	r6
    238c:	7f 92       	push	r7
    238e:	8f 92       	push	r8
    2390:	9f 92       	push	r9
    2392:	af 92       	push	r10
    2394:	bf 92       	push	r11
    2396:	cf 92       	push	r12
    2398:	df 92       	push	r13
    239a:	ef 92       	push	r14
    239c:	ff 92       	push	r15
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	ca 1b       	sub	r28, r26
    23ac:	db 0b       	sbc	r29, r27
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	09 94       	ijmp

000023ba <__epilogue_restores__>:
    23ba:	2a 88       	ldd	r2, Y+18	; 0x12
    23bc:	39 88       	ldd	r3, Y+17	; 0x11
    23be:	48 88       	ldd	r4, Y+16	; 0x10
    23c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    23c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    23c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    23c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    23c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    23ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    23cc:	b9 84       	ldd	r11, Y+9	; 0x09
    23ce:	c8 84       	ldd	r12, Y+8	; 0x08
    23d0:	df 80       	ldd	r13, Y+7	; 0x07
    23d2:	ee 80       	ldd	r14, Y+6	; 0x06
    23d4:	fd 80       	ldd	r15, Y+5	; 0x05
    23d6:	0c 81       	ldd	r16, Y+4	; 0x04
    23d8:	1b 81       	ldd	r17, Y+3	; 0x03
    23da:	aa 81       	ldd	r26, Y+2	; 0x02
    23dc:	b9 81       	ldd	r27, Y+1	; 0x01
    23de:	ce 0f       	add	r28, r30
    23e0:	d1 1d       	adc	r29, r1
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	ed 01       	movw	r28, r26
    23ee:	08 95       	ret

000023f0 <itoa>:
    23f0:	fb 01       	movw	r30, r22
    23f2:	9f 01       	movw	r18, r30
    23f4:	e8 94       	clt
    23f6:	42 30       	cpi	r20, 0x02	; 2
    23f8:	c4 f0       	brlt	.+48     	; 0x242a <itoa+0x3a>
    23fa:	45 32       	cpi	r20, 0x25	; 37
    23fc:	b4 f4       	brge	.+44     	; 0x242a <itoa+0x3a>
    23fe:	4a 30       	cpi	r20, 0x0A	; 10
    2400:	29 f4       	brne	.+10     	; 0x240c <itoa+0x1c>
    2402:	97 fb       	bst	r25, 7
    2404:	1e f4       	brtc	.+6      	; 0x240c <itoa+0x1c>
    2406:	90 95       	com	r25
    2408:	81 95       	neg	r24
    240a:	9f 4f       	sbci	r25, 0xFF	; 255
    240c:	64 2f       	mov	r22, r20
    240e:	77 27       	eor	r23, r23
    2410:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
    2414:	80 5d       	subi	r24, 0xD0	; 208
    2416:	8a 33       	cpi	r24, 0x3A	; 58
    2418:	0c f0       	brlt	.+2      	; 0x241c <itoa+0x2c>
    241a:	89 5d       	subi	r24, 0xD9	; 217
    241c:	81 93       	st	Z+, r24
    241e:	cb 01       	movw	r24, r22
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	a1 f7       	brne	.-24     	; 0x240c <itoa+0x1c>
    2424:	16 f4       	brtc	.+4      	; 0x242a <itoa+0x3a>
    2426:	5d e2       	ldi	r21, 0x2D	; 45
    2428:	51 93       	st	Z+, r21
    242a:	10 82       	st	Z, r1
    242c:	c9 01       	movw	r24, r18
    242e:	0c 94 19 12 	jmp	0x2432	; 0x2432 <strrev>

00002432 <strrev>:
    2432:	dc 01       	movw	r26, r24
    2434:	fc 01       	movw	r30, r24
    2436:	67 2f       	mov	r22, r23
    2438:	71 91       	ld	r23, Z+
    243a:	77 23       	and	r23, r23
    243c:	e1 f7       	brne	.-8      	; 0x2436 <strrev+0x4>
    243e:	32 97       	sbiw	r30, 0x02	; 2
    2440:	04 c0       	rjmp	.+8      	; 0x244a <strrev+0x18>
    2442:	7c 91       	ld	r23, X
    2444:	6d 93       	st	X+, r22
    2446:	70 83       	st	Z, r23
    2448:	62 91       	ld	r22, -Z
    244a:	ae 17       	cp	r26, r30
    244c:	bf 07       	cpc	r27, r31
    244e:	c8 f3       	brcs	.-14     	; 0x2442 <strrev+0x10>
    2450:	08 95       	ret

00002452 <__udivmodhi4>:
    2452:	aa 1b       	sub	r26, r26
    2454:	bb 1b       	sub	r27, r27
    2456:	51 e1       	ldi	r21, 0x11	; 17
    2458:	07 c0       	rjmp	.+14     	; 0x2468 <__udivmodhi4_ep>

0000245a <__udivmodhi4_loop>:
    245a:	aa 1f       	adc	r26, r26
    245c:	bb 1f       	adc	r27, r27
    245e:	a6 17       	cp	r26, r22
    2460:	b7 07       	cpc	r27, r23
    2462:	10 f0       	brcs	.+4      	; 0x2468 <__udivmodhi4_ep>
    2464:	a6 1b       	sub	r26, r22
    2466:	b7 0b       	sbc	r27, r23

00002468 <__udivmodhi4_ep>:
    2468:	88 1f       	adc	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	5a 95       	dec	r21
    246e:	a9 f7       	brne	.-22     	; 0x245a <__udivmodhi4_loop>
    2470:	80 95       	com	r24
    2472:	90 95       	com	r25
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	08 95       	ret

0000247a <_exit>:
    247a:	f8 94       	cli

0000247c <__stop_program>:
    247c:	ff cf       	rjmp	.-2      	; 0x247c <__stop_program>
